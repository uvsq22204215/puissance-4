import tkinter as tk
import tkinter.font as font 
from tkinter import ttk
import pygame 

def focus_on_simple():
    global dans_simple
    if not dans_simple:
        dans_simple = True

# Base de Jeu (1v1)
def jeu_1v1():
    
    # Efface tous les widgets sauf le label contenant l'image de background
    for widget in Racine.winfo_children():
        if widget != background_label:
            widget.pack_forget()

    # Définir les dimensions de la grille de jeu
    ROWS = 6
    COLS = 7

    # Créer la grille de jeu
    board = [[0 for j in range(COLS)] for i in range(ROWS)]

    # Définir la taille de chaque case de la grille
    CELL_SIZE = 110

    # Définir la couleur de fond de la grille
    BG_COLOR = "#0074D9"

    # Définir la couleur des jetons
    PLAYER1_COLOR = "#FF4136"
    PLAYER2_COLOR = "#2ECC40"

    # Définir les fonctions pour dessiner la grille et les jetons
    def draw_board():
        for i in range(ROWS):
            for j in range(COLS):
                x1 = j * CELL_SIZE
                y1 = i * CELL_SIZE
                x2 = x1 + CELL_SIZE
                y2 = y1 + CELL_SIZE
                canvas.create_rectangle(x1, y1, x2, y2, fill=BG_COLOR, outline="black",width=4)

    def draw_token(row, col, player):
        x = col * CELL_SIZE + CELL_SIZE // 2
        y = row * CELL_SIZE + CELL_SIZE // 2
        color = PLAYER1_COLOR if player == 1 else PLAYER2_COLOR
        canvas.create_oval(x - CELL_SIZE // 2, y - CELL_SIZE // 2, x + CELL_SIZE // 2, y + CELL_SIZE // 2, fill=color)

    # Définir la fonction pour jouer un coup
    def play(column, player):
        for row in range(ROWS - 1, -1, -1):
            if board[row][column] == 0:
                board[row][column] = player
                draw_token(row, column, player)
                return True
        return False

    # Définir la fonction pour vérifier si le jeu est terminé
    def check_win(player):
        # Vérifier les lignes
        for row in range(ROWS):
            for col in range(COLS - 3):
                if board[row][col] == player and board[row][col + 1] == player and board[row][col + 2] == player and board[row][col + 3] == player:
                    return True
        # Vérifier les colonnes
        for row in range(ROWS - 2):
            for col in range(COLS):
                if board[row][col] == player and board[row + 1][col] == player and board[row + 2][col] == player and board[row + 3][col] == player:
                    return True
        # Vérifier les diagonales
        for row in range(ROWS - 3):
            for col in range(COLS - 3):
                if board[row][col] == player and board[row + 1][col + 1] == player and board[row + 2][col + 2] == player and board[row + 3][col + 3] == player:
                    return True
                if board[row + 3][col] == player and board[row + 2][col + 1] == player and board[row + 1][col + 2] == player and board[row][col + 3] == player:
                    return True
        return False

    # Définir la fonction pour jouer un tour
    def play_turn(column, player):
        if play(column, player):
            if check_win(player):
                canvas.unbind("<Button-1>")
                label.config(text="Le joueur {} a gagné !".format(player))
            elif player == 1:
                label.config(text="C'est au tour du joueur 2.")
                canvas.unbind("<Button-1>")
                canvas.bind("<Button-1>", lambda event: play_turn(event.x // CELL_SIZE, 2))
            else:
                label.config(text="C'est au tour du joueur 1.")
                canvas.unbind("<Button-1>")
                canvas.bind("<Button-1>", lambda event: play_turn(event.x // CELL_SIZE, 1))

    # Dessiner la grille de jeu
    canvas = tk.Canvas(Racine, width=CELL_SIZE * COLS, height=CELL_SIZE * ROWS)
    canvas.pack()
    draw_board()

    #Bouton de retour 
    Bouton_Retour_1v1 = tk.Button(Racine, text="Retour", font=("Magneto",20),foreground="black",background="grey", width=16, command= retour_menu)
    Bouton_Retour_1v1.pack(side="top", anchor="nw", padx=10, pady=10)
    
    #Boutton exit
    
    # Afficher le message de début de partie
    label = tk.Label(Racine, text="C'est au tour du joueur 1.")
    label.pack()

    # Demander au joueur 1 de jouer le premier coup
    canvas.bind("<Button-1>", lambda event: play_turn(event.x // CELL_SIZE, 1))

    dans_simple = True





# Menu Option 
def changement_valeur_X(valX):
    global X 
    X = valX
    Racine.geometry(str(X) + "x" + str(Y))

def changement_valeur_Y(valY):
    global Y 
    Y = valY
    Racine.geometry(str(X) + "x" + str(Y))



def menu_options():
    global dans_simple, Titre2, Curseur_Fenetre_enX, Valeur_Curseur_Fenetre_X, Curseur_Fenetre_enY, Valeur_Curseur_Fenetre_Y, Bouton_Retour_Menu_Options

    # Efface tous les widgets sauf le label contenant l'image de background
    for widget in Racine.winfo_children():
        if widget != background_label:
            widget.pack_forget()
    
    # Elements menu options 
    Titre2 = tk.Label(Racine, text="Options :", font=("Magneto",50), relief="raised" ,foreground="Red",background="#258FCF", width=15, highlightbackground="#0082D1", highlightthickness= 5)
    Curseur_Fenetre_enX = tk.Scale(Racine, from_=800, to=1900, orient= "horizontal", length=400, command=changement_valeur_X)
    Curseur_Fenetre_enX.set(1900)
    Curseur_Fenetre_enX.config(label="Largeur de la fenêtre", font=("Snap ITC", 10),foreground="Red",background="#258FCF", width=15)
    Valeur_Curseur_Fenetre_X = tk.Label(Racine)
    Curseur_Fenetre_enY = tk.Scale(Racine, from_=600, to=1080, orient= "horizontal", length=400, command=changement_valeur_Y)
    Curseur_Fenetre_enY.set(1080)
    Curseur_Fenetre_enY.config(label="Hauteur de la fenêtre", font=("Snap ITC", 10),foreground="Red",background="#258FCF", width=15)
    Valeur_Curseur_Fenetre_Y = tk.Label(Racine)
    Bouton_Retour_Menu_Options = tk.Button(Racine, text="Retour", font=("Magneto",20),foreground="black",background="grey", width=16, command= retour_menu)

    # Placement des options 
    Titre2.pack(pady=50)
    Curseur_Fenetre_enX.pack()
    Valeur_Curseur_Fenetre_X.pack()
    Curseur_Fenetre_enY.pack()
    Valeur_Curseur_Fenetre_Y.pack()
    Bouton_Retour_Menu_Options.pack(side="top", anchor="nw", padx=10, pady=10)

    dans_simple = True

# Musique
def play_music():
    pygame.mixer.music.load("C:/Users/mamin/Downloads/Married Life.mp3")
    pygame.mixer.music.play(loops=-1) 

def retour_menu():
    global dans_simple
    dans_simple = False

     # Efface tous les widgets sauf le label contenant l'image de background
    for widget in Racine.winfo_children():
        if widget != background_label:
            widget.pack_forget()
    
    # Recrée les éléments du menu principal
    Titre.pack(pady=100)
    Bouton_1Vs1_Simple.pack(pady=15)
    Bouton_1Vs1_MultiMatch.pack(pady=15)
    Bouton_1VsIA.pack(pady=15)
    Bouton_Option.pack(pady=15)

    # Variable pour suivre l'état de la fenêtre
    dans_simple = False

X = 1900 
Y = 1080
val_taillefenetre = (str(X) + "x" + str(Y))
Racine = tk.Tk()
Racine.title("Puissance 4")
Racine.geometry(val_taillefenetre) 

# Création des éléments initiaux
image = tk.PhotoImage(file="C:/Users/mamin/Downloads/Hajj_Uchiwa_leaf_light_blue_light_red_4k_5800ce7f-8d76-417f-b99c-efc8ee76feb9(2).png")
background_label = tk.Label(Racine, image=image)
background_label.configure(width=Racine.winfo_width(), height=Racine.winfo_height())

Titre = tk.Label(Racine, text="Puissance ⁴", font=("Magneto",80), relief="raised" ,foreground="Red",background="#258FCF", width=20, highlightbackground="#0082D1", highlightthickness= 10) 
Titre.config(font=("Magneto", 80, "underline"))
Bouton_1Vs1_Simple = tk.Button(Racine, text="1 Vs 1 Simple", font=("Magneto",30),foreground="black",background="grey", width=17, command= jeu_1v1)
Bouton_1Vs1_MultiMatch = tk.Button(Racine, text="1 Vs 1 Multi-Manche",font=("Magneto",30),foreground="black",background="grey", width=17)
Bouton_1VsIA = tk.Button(Racine, text="1 Vs IA",font=("Magneto",30),foreground="black",background="grey", width=17 )
Bouton_Option = tk.Button(Racine, text="Options",font=("Magneto",30),foreground="black",background="grey", width=17, command=menu_options)

# Initialisation de Pygame, lancement musique
pygame.mixer.init()
play_music()

# Placement des éléments initiaux
background_label.place(x=0, y=0, relwidth=1, relheight=1)
Titre.pack(pady=100)
Bouton_1Vs1_Simple.pack(pady=15)
Bouton_1Vs1_MultiMatch.pack(pady=15)
Bouton_1VsIA.pack(pady=15)
Bouton_Option.pack(pady=15)

# Variable pour suivre l'état de la fenêtre
dans_simple = False






# Démarrage de la boucle principale de l'application
Racine.mainloop()
#shera



       